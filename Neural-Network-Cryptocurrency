import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split

# Reading the data set
df = pd.read_csv('./CSV_FILES/ETH_USD.csv')
    #print(len(df.columns))
x = df[df.columns[0:7]].values
y = df[df.columns[7]]

# Shuffle the dataset to mix up the rows.
x, y = shuffle(x, y, random_state=1)

# Convert the dataset into train and test part
train_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.5, random_state=415)
#print('train_y: ',train_y)
train_y = np.array(train_y).reshape(215,1)
test_y = np.array(test_y).reshape(216,1)

# Inspect the shape of the training and testing
print(train_x.shape)
print(train_y.shape)
print(test_x.shape)
print(test_y.shape)
print('x[200]: ',x[200])
print('y[200]: ',y[200])

# Define the important parameters and variable to work with the tensors
learning_rate = 0.0001
training_epochs = 200
cost_history = np.empty(shape=[1], dtype=float)
n_dim = x.shape[1]
print("n_dim", n_dim)
n_class = 1
model_path = './Ether_Code'

# Define the number of hidden layers and number of neurons for each layer
n_hidden_1 = 60
n_hidden_2 = 60


x = tf.placeholder(tf.float32, [None, n_dim])
W = tf.Variable(tf.zeros([n_dim, n_class]))
b = tf.Variable(tf.zeros([n_class]))
y_ = tf.placeholder(tf.float32, [None, n_class])
# print('x:', x)
# print('W:', W)
# print('b:', b)
# print('y_:', y_)
# x: Tensor("Placeholder:0", shape=(?, 7), dtype=float32)
# W: <tf.Variable 'Variable:0' shape=(7, 1) dtype=float32_ref>
# b: <tf.Variable 'Variable_1:0' shape=(1,) dtype=float32_ref>
# y_: Tensor("Placeholder_1:0", shape=(?, 1), dtype=float32)
# Define the model
def multilayer_perceptron(x, weights, biases):
    # Hidden layer with RELU activationsd

    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.sigmoid(layer_1)

    # Hidden layer with sigmoid activation
    # layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
    # layer_2 = tf.nn.sigmoid(layer_2)
    #
    # # Hidden layer with sigmoid activation
    # layer_3 = tf.add(tf.matmul(layer_2, weights['h3']), biases['b3'])
    # layer_3 = tf.nn.sigmoid(layer_3)

    # Hidden layer with RELU activation
    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
    layer_2 = tf.nn.relu(layer_2)

    # Output layer with linear activation
    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']
    return out_layer

# Define the weights and the biases for each layer

weights = {
    'h1': tf.Variable(tf.truncated_normal([n_dim, n_hidden_1])),
    'h2': tf.Variable(tf.truncated_normal([n_hidden_1, n_hidden_2])),
    # 'h3': tf.Variable(tf.truncated_normal([n_hidden_2, n_hidden_3])),
    # 'h4': tf.Variable(tf.truncated_normal([n_hidden_3, n_hidden_4])),
    'out': tf.Variable(tf.truncated_normal([n_hidden_2, n_class]))
}

biases = {
    'b1': tf.Variable(tf.truncated_normal([n_hidden_1])),
    'b2': tf.Variable(tf.truncated_normal([n_hidden_2])),
    # 'b3': tf.Variable(tf.truncated_normal([n_hidden_3])),
    # 'b4': tf.Variable(tf.truncated_normal([n_hidden_4])),
    'out': tf.Variable(tf.truncated_normal([n_class]))
}

# Initialize all variables

init = tf.global_variables_initializer()

saver = tf.train.Saver()

# Call your model defined
y = multilayer_perceptron(x, weights, biases)

# Define the cost function and optimizer
#cost_function = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=y, labels=y_))
cost_function = tf.reduce_sum(tf.squared_difference(y,y_))
#print(cost_function)
training_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost_function)

sess = tf.Session()
sess.run(init)

# Calculate the cost and the accuracy for each epoch

mse_history = []
accuracy_history = []

for epoch in range(training_epochs):
    sess.run(training_step, feed_dict={x: train_x, y_: train_y})
    cost = sess.run(cost_function, feed_dict={x: train_x, y_: train_y})
    cost_history = np.append(cost_history, cost)
    #correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1)))
    #accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    correct_prediction = 1 - abs((y_ - y)/y_)
    accuracy = tf.reduce_mean(correct_prediction)
    # print("Accuracy: "; (sess.run(accuracy, feed_dict={x: test_x, y_: test_y})))
    pred_y = sess.run(y, feed_dict={x: test_x})
    mse = tf.reduce_mean(tf.square(pred_y - test_y))
    mse_ = sess.run(mse)
    mse_history.append(mse_)
    accuracy = (sess.run(accuracy, feed_dict={x: train_x, y_: train_y}))
    accuracy_history.append(accuracy)

    print('epoch : ', epoch,' - ', 'cost: ', cost, " - MSE: ", mse_, "- Train Accuracy: ", accuracy*100,'%')

save_path = saver.save(sess, model_path)
print("Model saved in file: %s" % save_path)

# Plot mse and accuracy graph
# plt.plot(mse_history, 'r')
# plt.show()
# plt.plot(accuracy_history)
# plt.show()

# Print the final accuracy
print("Train Accuracy: ", accuracy*100,'%')
#print(sess.run(y, feed_dict={x:test_x,y_:test_y}))
correct_prediction = 1 - abs((y - y_)/y)
accuracy = tf.reduce_mean(correct_prediction)
print("Test Accuracy: ", (sess.run(accuracy, feed_dict={x: test_x, y_: test_y}))*100,'%')

# Print the final mean square error

pred_y = sess.run(y, feed_dict={x: test_x})
mse = tf.reduce_mean(tf.square(pred_y - test_y))
print("MSE: %.4f" % sess.run(mse))
